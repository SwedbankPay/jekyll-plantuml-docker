#!/bin/bash

if [[ "$DEBUG" == "true" ]]; then
    env                      # ...showing the environment
    cat "$GITHUB_EVENT_PATH" # ...and the GitHub webhook payload
    set -x                   # ...and script execution.
elif [[ -z "$DEBUG" ]]; then
    DEBUG=false
fi

# Any errors should cause an immediate exit and failure.
set -e

if [[ -z "$GITHUB_TOKEN" ]]; then
    echo "Environment variable GITHUB_TOKEN missing. Please define it."
    exit 1
fi

if [[ -z "$GITHUB_ACTOR" ]]; then
    echo "Environment variable GITHUB_ACTOR missing. Please define it."
    exit 1
fi

if [[ -z "$GITHUB_ACTOR_EMAIL" ]]; then
    echo "Environment variable GITHUB_ACTOR_EMAIL missing. Please define it."
    exit 1
fi

if [[ -z "$GITHUB_ACTOR_EMAIL" ]]; then
    echo "Environment variable GITHUB_ACTOR_EMAIL missing. Please define it."
    exit 1
fi

if [[ -z "$GITHUB_REPO" ]]; then
    echo "Environment variable GITHUB_REPO missing. Please define it."
    exit 1
fi

if [[ -z "$JEKYLL_ENV" ]]; then
    if [[ "$DEBUG" == "true" ]]; then echo "No JEKYLL_ENV specified, defaulting to 'production'."; fi
    JEKYLL_ENV="production"
fi

# Set publishing branch to 'gh-pages' by default.
if [[ -z "$GH_PAGES_BRANCH" ]]; then
    if [[ "$DEBUG" == "true" ]]; then echo "No GH_PAGES_BRANCH specified, defaulting to 'gh-pages'."; fi
    GH_PAGES_BRANCH="gh-pages"
fi

# Initialize Git if there's no .git folder
if [[ ! -d ".git" ]]; then
    if [[ "$DEBUG" == "true" ]]; then echo "Git not initialized. Initializing."; fi
    git init
    git add --all .
    if [[ "$DEBUG" == "true" ]]; then echo "Configuring Git user and remote."; fi
    git config user.email "${GITHUB_ACTOR_EMAIL}" || exit $?
    git config user.name "${GITHUB_ACTOR}" || exit $?
    git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git" || exit $?
    git commit --message 'Initial commit'
else
    if [[ "$DEBUG" == "true" ]]; then echo "Configuring Git user and remote."; fi
    git config user.email "${GITHUB_ACTOR_EMAIL}" || exit $?
    git config user.name "${GITHUB_ACTOR}" || exit $?
    git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPO}.git" || exit $?
fi

branch_existed=false
# If $GH_PAGES_BRANCH doesn't exist, create and track it.
if git show-ref --verify --quiet refs/heads/${GH_PAGES_BRANCH}; then
    branch_existed=true
    if [[ "$DEBUG" == "true" ]]; then echo "The branch '${GH_PAGES_BRANCH}' was found successfully."; fi
else
    branch_existed=true
    if [[ "$DEBUG" == "true" ]]; then echo "The branch '${GH_PAGES_BRANCH}' was not found. Creating it."; fi
    git branch ${GH_PAGES_BRANCH}
fi

# Install bundler if it's not already available on $PATH.
if ! bundle_location="$(type -p bundle)" || [[ -z $bundle_location ]]; then
    if [[ "$DEBUG" == "true" ]]; then echo "Bundler not found. Installing bundler."; fi
    gem install bundler --force
fi

if [[ "$DEBUG" == "true" ]]; then echo "Bundle check or install."; fi
bundle check || bundle install

# Build project
if [[ "$DEBUG" == "true" ]]; then echo "Jekyll build:${JEKYLL_ENV}"; fi
bundle exec jekyll build JEKYLL_ENV=${JEKYLL_ENV} --verbose || exit $?

branch_name="$(git rev-parse --abbrev-ref HEAD)"

if [[ "$branch_name" == "master" ]]; then
    cd _site
    git add --all --force .

    # If we detect changes, commit them.
    # `git diff-index --quiet` returns 0 on no changes and 1 on changes
    if git diff-index --cached --quiet HEAD; then
        if [[ "$DEBUG" == "true" ]]; then echo "No changes detected. Nothing to do!"; fi
    else
        if [[ "$DEBUG" == "true" ]]; then echo "Changes detected. Committing."; fi
        git commit --message "Autodeployed"

        if [[ "$DEBUG" == "true" ]]; then echo "Pushing to $GH_PAGES_BRANCH"; fi

        if [[ "$branch_existed" == "true" ]]; then
            git push --force origin "${GH_PAGES_BRANCH}" || exit $?
        else
            git push --set-upstream origin "${GH_PAGES_BRANCH}" || exit $?
        fi
    fi
else
    if [[ "$DEBUG" == "true" ]]; then echo "Branch '$branch_name' is not 'master', so nothing to do."; fi
fi

if [[ "$DEBUG" == "true" ]]; then echo "Done!"; fi
