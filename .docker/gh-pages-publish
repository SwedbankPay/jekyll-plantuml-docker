#!/bin/bash

if [[ "$DEBUG" == "true" ]]; then
    env                      # ...showing the environment
    cat "$GITHUB_EVENT_PATH" # ...and the GitHub webhook payload
    set -x                   # ...and script execution.
fi

# Any errors should cause an immediate exit and failure.
set -e

# Set input variables
readonly gh_api_token="${GITHUB_TOKEN}"
readonly committer_name="${GITHUB_ACTOR}"
readonly commiter_email="${GITHUB_ACTOR_EMAIL}"
readonly publishing_branch="${GH_PAGES_BRANCH}"
readonly jekyll_env="${JEKYLL_ENV}"
readonly github_repository="${GITHUB_REPO}"

# Initialize Git if there's no .git folder
if [[ ! -d ".git" ]]; then
    echo "Git not initialized. Initializing."
    git init
    git add --all .
    echo "Configuring Git user and remote."
    git config user.email "${commiter_email}" || exit $?
    git config user.name "${committer_name}" || exit $?
    git config remote.origin.url "https://x-access-token:${gh_api_token}@github.com/${github_repository}.git" || exit $?
    git commit --message 'Initial commit'
else
    echo "Configuring Git user and remote."
    git config user.email "${commiter_email}" || exit $?
    git config user.name "${committer_name}" || exit $?
    git config remote.origin.url "https://x-access-token:${gh_api_token}@github.com/${github_repository}.git" || exit $?
fi;

# If $publishing_branch doesn't exist, create and track it.
if git show-ref --verify --quiet refs/heads/${publishing_branch}; then
    echo "The branch '${publishing_branch}' was found successfully."
else
    echo "The branch '${publishing_branch}' was not found. Creating it."
    git checkout -b ${publishing_branch}
    git branch --set-upstream-to=origin/${publishing_branch} ${publishing_branch}
fi

# Install bundler if it's not already available on $PATH.
if ! bundle_location="$(type -p bundle)" || [[ -z $bundle_location ]]; then
    echo "Bundler not found. Installing bundler."
    gem install bundler --force
fi

bundle check || bundle install

# Build project
echo "Jekyll build:${jekyll_env}"
bundle exec jekyll build JEKYLL_ENV=$jekyll_env --verbose || exit $?

branch_name="$(git rev-parse --abbrev-ref HEAD)"

if [[ "$branch_name" == "master" ]]; then
    cd _site
    git add --all .
    git commit --message "Autodeployed"
    echo "Pushing to $publishing_branch"
    git push --force origin "$publishing_branch" || exit $?
else
    echo "Branch '$branch_name' is not 'master', so nothing to do."
fi

echo "Done!"
